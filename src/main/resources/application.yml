# Cache properties
redis:
  password: 1234
  sentinel:
    master: mymaster
    nodes:
      - host: redis-sentinel1
        port: 26379
      - host: redis-sentinel2
        port: 26379
      - host: redis-sentinel3
        port: 26379

cache:
  per:
    beta: 1.5
    default-ttl: 5_000
    delta-key-suffix: ":delta"
    default-lock-ttl-ms: 600
    base-backoff-ms: 40
    max-jitter-ms: 20
    retry-attempts: 1

---

spring:
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true

kakao:
  api:
    authorization: ${KAKAO_CLIENT_ID}


#resilience4j:
#  circuitbreaker:
#    failure-rate-threshold: 10   # 실패 10% 이상 시 서킷 오픈
#    slow-call-duration-threshold: 500   # 500ms 이상 소요 시 실패로 간주
#    slow-call-rate-threshold: 10   # slowCallDurationThreshold 초과 비율이 10% 이상 시 서킷 오픈
#    wait-duration-in-open-state: 30000   # OPEN -> HALF-OPEN 전환 전 기다리는 시간
#    minimum-number-of-calls: 50   # 집계에 필요한 최소 호출 수
#    sliding-window-size: 100   # 서킷 CLOSE 상태에서 N회 호출 도달 시 failureRateThreshold 실패 비율 계산
#    permitted-number-of-calls-in-half-open-state: 30   # HALFOPEN -> CLOSE or OPEN 으로 판단하기 위해 호출 횟수

resilience4j:
  circuitbreaker:
    instances:
      CIRCUIT_REDIS:
        sliding-window-type: COUNT_BASED
        sliding-window-size: 20               # 20회로 더 많은 데이터로 판단
        minimum-number-of-calls: 10           # 10회 이후부터 비율 계산 시작
        failure-rate-threshold: 30            # 30% → 더 관대하게 설정
        slow-call-duration-threshold: 2000ms  # 2초로 늘림 (PER 테스트용 어댑터 고려)
        slow-call-rate-threshold: 50          # 50% → 절반이 슬로우여야 OPEN
        permitted-number-of-calls-in-half-open-state: 5   # HALF-OPEN에서 5회 탐색
        wait-duration-in-open-state: 10s      # 10초로 늘려서 복구 시간 확보
        # Redis 타임아웃/접속 예외가 실패로 집계되도록 필요 시 추가
        record-exceptions:
          - io.lettuce.core.RedisException
          - io.lettuce.core.RedisCommandTimeoutException

management:
  endpoints:
    web:
      base-path: /api/actuator
  endpoint:
    health:
      show-details: always
  health:
    circuitbreakers:
      enabled: true